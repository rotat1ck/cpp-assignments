#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <conio.h>

using namespace std;

struct cat {
    string name;
    int age;
    string color;
    string breed;
};

// –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
void start();
cat recentCat;
vector<cat> savedCats;

// —á—Ç–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –≤–≤–µ–¥–µ–Ω–æ–π –∫–æ—à–∫–∏
ostream &operator<<(ostream &os, cat &cat) {
    os << "–ò–º—è:\t" << cat.name << "\n–õ–µ—Ç:\t" << cat.age << "\n–¶–≤–µ—Ç:\t" << cat.color << "\n–ü–æ—Ä–æ–¥–∞:\t" << cat.breed << "\n\n";
    return os;
}

// —á—Ç–µ–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–∞ –∫–æ—à–µ–∫
ostream &operator<<(ostream &os, vector<cat> &cats) {
    os << "–í–µ–∫—Ç–æ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–∫: " << endl;
    for (auto cat : cats) {
        os << "–ò–º—è:\t" << cat.name << "\n–õ–µ—Ç:\t" << cat.age << "\n–¶–≤–µ—Ç:\t" << cat.color << "\n–ü–æ—Ä–æ–¥–∞:\t" << cat.breed << "\n\n";
    }
    return os;
}

// –≤–≤–æ–¥ –∫–æ—à–∫–∏
istream &operator>>(istream &is, cat &cat) {
    is >> cat.name >> cat.age >> cat.color >> cat.breed;
    return is;
}

// —Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ—à–∫–∏ –∏ –∑–∞–ø–∏—Å—å –≤ –≤–µ–∫—Ç–æ—Ä
void createCat(vector<cat> &savedCats, cat &recentCat) {
    system("cls");

    cout << "–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –æ –∫–æ—à–∫–µ\n" << "–®–∞–±–ª–æ–Ω: {–ò–ú–Ø} {–í–û–ó–†–ê–°–¢} {–¶–í–ï–¢} {–ü–û–†–û–î–ê}" << endl;
    cat newCat;
    cin >> newCat;
    recentCat = newCat;
    cout << "–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞, –¥–æ–±–∞–≤–∏—Ç—å –µ—ë –≤ —Å–ø–∏—Å–æ–∫? (y)" << endl;
    
    char ch = _getch();
    if (tolower(ch) == 'y') {
        savedCats.push_back(newCat);
        cout << "–ó–∞–ø–∏—Å—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞" << endl;
    } else {
        cout << "–ó–∞–ø–∏—Å—å –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞" << endl;
    }

    start();
}

// —Å—Ç–∞—Ä—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è
void start() {
    vector<char> allowedKeys= {'1', '2', '3'};
    cout << "–í—ã–±–µ—Ä–µ—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é: \n" << "1. –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ—à–∫–∏\n2. –ü–æ—Å–ª–µ–¥–Ω—è—è –∫–æ—à–∫–∞\n3. –°–ø–∏—Å–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∫–æ—à–µ–∫" << endl;
    char ch;
    while(true) {
        if (_kbhit()) {
            ch = _getch();
            if (ch == 27) {
                exit(0);
            } else if (find(allowedKeys.begin(), allowedKeys.end(), ch) != allowedKeys.end()) {
                switch(ch) {
                    case '1': {
                        createCat(savedCats, recentCat);
                        break;
                    } case '2': {
                        system("cls");
                        cout << "–ü–æ—Å–ª–µ–¥–Ω—è—è –≤–≤–µ–¥–µ–Ω–∞—è –∫–æ—à–∫–∞: \n" << recentCat;
                        break;
                    } case '3': {
                        system("cls");
                        cout << savedCats;
                        break;
                    }
                }
                start();
            }
            system("cls");
            cout << "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥\n";
            start();
        }
    }
}

int main() {
    system("chcp 65001");
    system("cls");
    cout << "ESC - –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É" << endl;
    start();

    // ü•®
}